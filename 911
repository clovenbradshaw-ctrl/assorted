<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Emergency 911 Location Service</title>
    <link rel="icon" href="https://storage.googleapis.com/art_homelessness/favicon.ico">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        :root {
            --primary-red: #dc2626;
            --primary-green: #059669;
            --primary-blue: #2563eb;
            --accent-amber: #f59e0b;
            --bg-light: #fafafa;
            --text-primary: #111827;
            --text-secondary: #6b7280;
            --border-light: #e5e7eb;
            --shadow-sm: 0 1px 3px rgba(0,0,0,0.1);
            --shadow-md: 0 4px 6px rgba(0,0,0,0.1);
            --shadow-lg: 0 10px 25px rgba(0,0,0,0.1);
            --shadow-xl: 0 20px 40px rgba(0,0,0,0.15);
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            background: linear-gradient(135deg, #fef2f2 0%, #fee2e2 100%);
            min-height: 100vh;
            position: relative;
            overflow-x: hidden;
        }
        
        /* Animated Background */
        .bg-animation {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            z-index: -1;
            opacity: 0.03;
            background-image: 
                radial-gradient(circle at 20% 50%, #dc2626 0%, transparent 50%),
                radial-gradient(circle at 80% 80%, #059669 0%, transparent 50%),
                radial-gradient(circle at 40% 20%, #2563eb 0%, transparent 50%);
            animation: bgMove 20s ease infinite;
        }
        
        @keyframes bgMove {
            0%, 100% { transform: translate(0, 0) scale(1); }
            33% { transform: translate(-20px, -20px) scale(1.1); }
            66% { transform: translate(20px, -10px) scale(0.9); }
        }
        
        .container {
            max-width: 500px;
            margin: 0 auto;
            padding: 20px;
            position: relative;
        }
        
        /* Header */
        .header {
            background: linear-gradient(135deg, #991b1b 0%, #dc2626 100%);
            color: white;
            padding: 30px 20px;
            text-align: center;
            border-radius: 20px 20px 0 0;
            position: relative;
            overflow: hidden;
            box-shadow: var(--shadow-lg);
        }
        
        .header::before {
            content: '';
            position: absolute;
            top: -50%;
            right: -50%;
            width: 200%;
            height: 200%;
            background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%);
            animation: pulse 3s ease-in-out infinite;
        }
        
        @keyframes pulse {
            0%, 100% { transform: scale(0.8); opacity: 0; }
            50% { transform: scale(1.2); opacity: 1; }
        }
        
        .header h1 {
            font-size: 1.75rem;
            font-weight: 800;
            margin-bottom: 8px;
            position: relative;
            z-index: 1;
            text-shadow: 0 2px 4px rgba(0,0,0,0.2);
        }
        
        .header p {
            font-size: 0.875rem;
            opacity: 0.95;
            position: relative;
            z-index: 1;
        }
        
        .emergency-indicator {
            display: inline-flex;
            align-items: center;
            gap: 8px;
            background: rgba(255,255,255,0.2);
            padding: 6px 12px;
            border-radius: 20px;
            margin-top: 12px;
            backdrop-filter: blur(10px);
        }
        
        .emergency-dot {
            width: 8px;
            height: 8px;
            background: white;
            border-radius: 50%;
            animation: blink 1s infinite;
        }
        
        @keyframes blink {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.3; }
        }
        
        /* Emergency Buttons */
        .emergency-buttons {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 16px;
            padding: 24px;
            background: white;
            margin-top: -2px;
        }
        
        .btn-911 {
            padding: 24px 16px;
            border: none;
            border-radius: 16px;
            font-weight: 700;
            cursor: pointer;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 10px;
            text-decoration: none;
            color: white;
            position: relative;
            overflow: hidden;
            box-shadow: var(--shadow-md);
        }
        
        .btn-911::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 0;
            height: 0;
            border-radius: 50%;
            background: rgba(255,255,255,0.3);
            transform: translate(-50%, -50%);
            transition: width 0.6s, height 0.6s;
        }
        
        .btn-911:hover::before {
            width: 300px;
            height: 300px;
        }
        
        .btn-call {
            background: linear-gradient(135deg, #059669 0%, #10b981 100%);
        }
        
        .btn-call:hover {
            transform: translateY(-4px);
            box-shadow: 0 12px 24px rgba(5, 150, 105, 0.3);
        }
        
        .btn-text {
            background: linear-gradient(135deg, #2563eb 0%, #3b82f6 100%);
        }
        
        .btn-text:hover {
            transform: translateY(-4px);
            box-shadow: 0 12px 24px rgba(37, 99, 235, 0.3);
        }
        
        .btn-911 .icon {
            font-size: 2rem;
            filter: drop-shadow(0 2px 4px rgba(0,0,0,0.2));
            position: relative;
            z-index: 1;
        }
        
        .btn-911 .label {
            font-size: 1.125rem;
            position: relative;
            z-index: 1;
        }
        
        .btn-911 .sublabel {
            font-size: 0.75rem;
            opacity: 0.9;
            font-weight: 500;
            position: relative;
            z-index: 1;
        }
        
        /* Main Content */
        .content {
            background: white;
            padding: 24px;
            border-radius: 0 0 20px 20px;
            box-shadow: var(--shadow-lg);
        }
        
        /* Location Cards */
        .location-card {
            margin-bottom: 16px;
            padding: 16px;
            background: var(--bg-light);
            border-radius: 12px;
            border: 1px solid var(--border-light);
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }
        
        .location-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(16, 185, 129, 0.1), transparent);
            transition: left 0.5s;
        }
        
        .location-card:hover::before {
            left: 100%;
        }
        
        .location-card.primary {
            background: linear-gradient(135deg, #ecfdf5 0%, #d1fae5 100%);
            border: 2px solid #10b981;
            box-shadow: 0 4px 12px rgba(16, 185, 129, 0.15);
        }
        
        .card-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 8px;
        }
        
        .card-label {
            font-size: 0.75rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            color: var(--text-secondary);
            display: flex;
            align-items: center;
            gap: 8px;
            font-weight: 600;
        }
        
        .primary .card-label {
            color: #047857;
            font-weight: 700;
        }
        
        .card-value {
            font-size: 1rem;
            font-weight: 600;
            color: var(--text-primary);
            word-break: break-word;
            line-height: 1.5;
        }
        
        .card-value.mono {
            font-family: 'SF Mono', 'Monaco', 'Inconsolata', 'Fira Code', monospace;
            font-size: 1.125rem;
            letter-spacing: 1px;
            background: white;
            padding: 8px 12px;
            border-radius: 8px;
            margin-top: 8px;
        }
        
        .status-badge {
            display: inline-flex;
            align-items: center;
            gap: 4px;
            padding: 4px 8px;
            border-radius: 6px;
            font-size: 0.625rem;
            font-weight: 700;
            background: linear-gradient(135deg, #10b981 0%, #059669 100%);
            color: white;
            text-transform: uppercase;
            box-shadow: 0 2px 4px rgba(16, 185, 129, 0.2);
        }
        
        .copy-icon {
            width: 16px;
            height: 16px;
            cursor: pointer;
            opacity: 0.6;
            transition: opacity 0.2s;
        }
        
        .copy-icon:hover {
            opacity: 1;
        }
        
        /* Accuracy Indicator */
        .accuracy-section {
            margin: 20px 0;
            padding: 16px;
            background: linear-gradient(135deg, #f9fafb 0%, #f3f4f6 100%);
            border-radius: 12px;
            border: 1px solid var(--border-light);
        }
        
        .accuracy-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 12px;
        }
        
        .accuracy-title {
            font-size: 0.875rem;
            font-weight: 600;
            color: var(--text-secondary);
        }
        
        .accuracy-value {
            font-size: 0.875rem;
            font-weight: 700;
            color: var(--text-primary);
        }
        
        .accuracy-bar {
            height: 8px;
            background: #e5e7eb;
            border-radius: 4px;
            overflow: hidden;
            position: relative;
        }
        
        .accuracy-fill {
            height: 100%;
            background: linear-gradient(90deg, #10b981 0%, #059669 100%);
            border-radius: 4px;
            transition: width 0.5s ease;
            position: relative;
            overflow: hidden;
        }
        
        .accuracy-fill::after {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.3), transparent);
            animation: shimmer 2s infinite;
        }
        
        @keyframes shimmer {
            100% { left: 100%; }
        }
        
        .accuracy-poor .accuracy-fill {
            background: linear-gradient(90deg, #f59e0b 0%, #d97706 100%);
        }
        
        /* Action Buttons */
        .action-buttons {
            display: grid;
            gap: 12px;
            margin-top: 24px;
        }
        
        .action-btn {
            width: 100%;
            padding: 16px;
            background: white;
            color: var(--text-primary);
            border: 2px solid var(--border-light);
            border-radius: 12px;
            font-size: 0.9375rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            position: relative;
            overflow: hidden;
        }
        
        .action-btn:hover {
            background: var(--bg-light);
            border-color: var(--text-secondary);
            transform: translateY(-2px);
            box-shadow: var(--shadow-md);
        }
        
        .action-btn.primary {
            background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
            color: white;
            border: none;
        }
        
        .action-btn.primary:hover {
            box-shadow: 0 8px 20px rgba(37, 99, 235, 0.3);
        }
        
        /* Loading State */
        .loading {
            text-align: center;
            padding: 80px 20px;
            background: white;
            border-radius: 20px;
            box-shadow: var(--shadow-lg);
        }
        
        .loading-spinner {
            width: 64px;
            height: 64px;
            margin: 0 auto 24px;
            position: relative;
        }
        
        .loading-spinner::before,
        .loading-spinner::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            border-radius: 50%;
            border: 4px solid transparent;
        }
        
        .loading-spinner::before {
            border-top-color: var(--primary-red);
            animation: spin 1s linear infinite;
        }
        
        .loading-spinner::after {
            border-bottom-color: var(--primary-green);
            animation: spin 1.5s linear infinite reverse;
        }
        
        @keyframes spin {
            100% { transform: rotate(360deg); }
        }
        
        .loading-text {
            font-size: 1.125rem;
            color: var(--text-primary);
            font-weight: 600;
        }
        
        .loading-subtext {
            font-size: 0.875rem;
            color: var(--text-secondary);
            margin-top: 8px;
        }
        
        /* Error State */
        .error {
            background: linear-gradient(135deg, #fef2f2 0%, #fee2e2 100%);
            color: #991b1b;
            padding: 24px;
            border-radius: 16px;
            text-align: center;
            border: 2px solid #fca5a5;
            box-shadow: var(--shadow-md);
        }
        
        .error-icon {
            font-size: 3rem;
            margin-bottom: 16px;
        }
        
        .error-title {
            font-size: 1.25rem;
            font-weight: 700;
            margin-bottom: 8px;
        }
        
        .error-message {
            font-size: 0.9375rem;
            line-height: 1.5;
            margin-bottom: 20px;
        }
        
        .retry-btn {
            padding: 12px 24px;
            background: var(--primary-red);
            color: white;
            border: none;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .retry-btn:hover {
            background: #b91c1c;
            transform: translateY(-2px);
            box-shadow: var(--shadow-md);
        }
        
        /* Toast Notifications */
        .toast {
            position: fixed;
            bottom: 24px;
            left: 50%;
            transform: translateX(-50%) translateY(100px);
            background: linear-gradient(135deg, #10b981 0%, #059669 100%);
            color: white;
            padding: 16px 24px;
            border-radius: 12px;
            font-weight: 600;
            box-shadow: var(--shadow-xl);
            z-index: 2000;
            opacity: 0;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            display: flex;
            align-items: center;
            gap: 12px;
        }
        
        .toast.show {
            opacity: 1;
            transform: translateX(-50%) translateY(0);
        }
        
        .toast.error {
            background: linear-gradient(135deg, #dc2626 0%, #991b1b 100%);
        }
        
        .toast-icon {
            font-size: 1.25rem;
        }
        
        /* Warning Box */
        .warning-box {
            background: linear-gradient(135deg, #fef3c7 0%, #fed7aa 100%);
            border-left: 4px solid var(--accent-amber);
            padding: 12px 16px;
            margin-top: 20px;
            font-size: 0.75rem;
            color: #92400e;
            line-height: 1.5;
            border-radius: 8px;
            display: flex;
            align-items: flex-start;
            gap: 8px;
        }
        
        .warning-icon {
            font-size: 1rem;
            flex-shrink: 0;
        }
        
        /* Additional Features Section */
        .features-section {
            margin-top: 24px;
            padding: 20px;
            background: linear-gradient(135deg, #f0f9ff 0%, #e0f2fe 100%);
            border-radius: 12px;
            border: 1px solid #bfdbfe;
        }
        
        .features-title {
            font-size: 0.875rem;
            font-weight: 700;
            color: #1e40af;
            margin-bottom: 12px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        .feature-item {
            display: flex;
            align-items: center;
            gap: 12px;
            padding: 8px 0;
            font-size: 0.875rem;
            color: var(--text-primary);
        }
        
        .feature-icon {
            width: 24px;
            height: 24px;
            display: flex;
            align-items: center;
            justify-content: center;
            background: white;
            border-radius: 6px;
            flex-shrink: 0;
        }
        
        /* Responsive Design */
        @media (max-width: 480px) {
            .container {
                padding: 0;
            }
            
            .header {
                border-radius: 0;
            }
            
            .content {
                border-radius: 0;
            }
            
            .emergency-buttons {
                grid-template-columns: 1fr;
            }
            
            .btn-911 {
                padding: 20px;
            }
        }
        
        /* Accessibility */
        @media (prefers-reduced-motion: reduce) {
            * {
                animation: none !important;
                transition: none !important;
            }
        }
        
        .visually-hidden {
            position: absolute;
            width: 1px;
            height: 1px;
            padding: 0;
            margin: -1px;
            overflow: hidden;
            clip: rect(0, 0, 0, 0);
            white-space: nowrap;
            border: 0;
        }
        
        /* Dark mode support */
        @media (prefers-color-scheme: dark) {
            :root {
                --bg-light: #1f2937;
                --text-primary: #f9fafb;
                --text-secondary: #d1d5db;
                --border-light: #374151;
            }
            
            body {
                background: linear-gradient(135deg, #1f2937 0%, #111827 100%);
            }
            
            .location-card {
                background: #374151;
            }
            
            .content {
                background: #1f2937;
            }
            
            .emergency-buttons {
                background: #1f2937;
            }
        }
    </style>
</head>
<body>
    <div class="bg-animation"></div>
    
    <div class="container">
        <div class="header">
            <h1>🚨 Emergency Location Service</h1>
            <p>Precise location for 911 dispatchers</p>
            <div class="emergency-indicator">
                <span class="emergency-dot"></span>
                <span>Ready to assist</span>
            </div>
        </div>
        
        <div class="emergency-buttons" id="emergencyButtons" style="display:none;">
            <a href="tel:911" class="btn-911 btn-call" aria-label="Call 911">
                <span class="icon">📞</span>
                <span class="label">Call 911</span>
                <span class="sublabel">Voice Emergency</span>
            </a>
            <a href="#" onclick="text911();return false;" class="btn-911 btn-text" aria-label="Text 911">
                <span class="icon">💬</span>
                <span class="label">Text 911</span>
                <span class="sublabel">Silent Emergency</span>
            </a>
        </div>
        
        <div id="loading" class="loading">
            <div class="loading-spinner"></div>
            <div class="loading-text">Acquiring your location...</div>
            <div class="loading-subtext">Please allow location access when prompted</div>
        </div>
        
        <div id="error" class="error" style="display:none;">
            <div class="error-icon">⚠️</div>
            <div class="error-title">Location Access Required</div>
            <div class="error-message" id="errorMessage">Please enable location access to use this emergency service</div>
            <button class="retry-btn" onclick="retryLocation()">Try Again</button>
        </div>
        
        <div id="content" class="content" style="display:none;">
            <div class="location-card primary">
                <div class="card-header">
                    <div class="card-label">
                        📍 GPS Coordinates
                        <span class="status-badge">911 READY</span>
                    </div>
                    <svg class="copy-icon" onclick="copyCoordinates()" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M8 3a1 1 0 011-1h2a1 1 0 110 2H9a1 1 0 01-1-1z"/>
                        <path d="M6 3a2 2 0 00-2 2v11a2 2 0 002 2h8a2 2 0 002-2V5a2 2 0 00-2-2 3 3 0 01-3 3H9a3 3 0 01-3-3z"/>
                    </svg>
                </div>
                <div class="card-value mono" id="coordinates">Loading...</div>
            </div>
            
            <div class="location-card">
                <div class="card-header">
                    <div class="card-label">🏠 Street Address</div>
                    <svg class="copy-icon" onclick="copyAddress()" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M8 3a1 1 0 011-1h2a1 1 0 110 2H9a1 1 0 01-1-1z"/>
                        <path d="M6 3a2 2 0 00-2 2v11a2 2 0 002 2h8a2 2 0 002-2V5a2 2 0 00-2-2 3 3 0 01-3 3H9a3 3 0 01-3-3z"/>
                    </svg>
                </div>
                <div class="card-value" id="address">Locating...</div>
            </div>
            
            <div class="location-card">
                <div class="card-header">
                    <div class="card-label">🚦 Nearest Intersection</div>
                </div>
                <div class="card-value" id="crossStreets">Locating...</div>
            </div>
            
            <div class="location-card">
                <div class="card-header">
                    <div class="card-label">📱 Plus Code</div>
                    <svg class="copy-icon" onclick="copyPlusCode()" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M8 3a1 1 0 011-1h2a1 1 0 110 2H9a1 1 0 01-1-1z"/>
                        <path d="M6 3a2 2 0 00-2 2v11a2 2 0 002 2h8a2 2 0 002-2V5a2 2 0 00-2-2 3 3 0 01-3 3H9a3 3 0 01-3-3z"/>
                    </svg>
                </div>
                <div class="card-value mono" id="plusCode">Loading...</div>
            </div>
            
            <div class="accuracy-section" id="accuracySection">
                <div class="accuracy-header">
                    <div class="accuracy-title">Location Accuracy</div>
                    <div class="accuracy-value" id="accuracyText">Calculating...</div>
                </div>
                <div class="accuracy-bar">
                    <div class="accuracy-fill" id="accuracyBar" style="width: 0%"></div>
                </div>
            </div>
            
            <div class="action-buttons">
                <button class="action-btn primary" onclick="copyAll()">
                    <span>📋</span>
                    <span>Copy All Location Info</span>
                </button>
                <button class="action-btn" onclick="shareLocation()">
                    <span>📤</span>
                    <span>Share Location</span>
                </button>
                <button class="action-btn" onclick="openInMaps()">
                    <span>🗺️</span>
                    <span>Open in Maps</span>
                </button>
            </div>
            
            <div class="warning-box" id="textWarning">
                <span class="warning-icon">⚠️</span>
                <div>
                    <strong>Text 911 Status:</strong>
                    <span id="textStatus">Checking availability...</span>
                </div>
            </div>
            
            <div class="features-section">
                <div class="features-title">Emergency Tips</div>
                <div class="feature-item">
                    <div class="feature-icon">💡</div>
                    <span>Stay calm and speak clearly when calling 911</span>
                </div>
                <div class="feature-item">
                    <div class="feature-icon">📍</div>
                    <span>Your location is automatically updating for accuracy</span>
                </div>
                <div class="feature-item">
                    <div class="feature-icon">🔋</div>
                    <span>Keep your device charged during emergencies</span>
                </div>
                <div class="feature-item">
                    <div class="feature-icon">📱</div>
                    <span>Screenshot this info if needed for reference</span>
                </div>
            </div>
        </div>
    </div>
    
    <div id="toast" class="toast">
        <span class="toast-icon">✓</span>
        <span id="toastMessage">Message</span>
    </div>
    
    <script>
        // Global variables
        let currentLocation = null;
        let watchId = null;
        const CODE_ALPHABET = '23456789CFGHJMPQRVWX';
        
        // State abbreviations mapping
        const STATE_ABBREVIATIONS = {
            'Alabama':'AL','Alaska':'AK','Arizona':'AZ','Arkansas':'AR','California':'CA',
            'Colorado':'CO','Connecticut':'CT','Delaware':'DE','District of Columbia':'DC',
            'Florida':'FL','Georgia':'GA','Hawaii':'HI','Idaho':'ID','Illinois':'IL',
            'Indiana':'IN','Iowa':'IA','Kansas':'KS','Kentucky':'KY','Louisiana':'LA',
            'Maine':'ME','Maryland':'MD','Massachusetts':'MA','Michigan':'MI','Minnesota':'MN',
            'Mississippi':'MS','Missouri':'MO','Montana':'MT','Nebraska':'NE','Nevada':'NV',
            'New Hampshire':'NH','New Jersey':'NJ','New Mexico':'NM','New York':'NY',
            'North Carolina':'NC','North Dakota':'ND','Ohio':'OH','Oklahoma':'OK','Oregon':'OR',
            'Pennsylvania':'PA','Rhode Island':'RI','South Carolina':'SC','South Dakota':'SD',
            'Tennessee':'TN','Texas':'TX','Utah':'UT','Vermont':'VT','Virginia':'VA',
            'Washington':'WA','West Virginia':'WV','Wisconsin':'WI','Wyoming':'WY','Puerto Rico':'PR'
        };
        
        // Text 911 data with Nashville/Davidson County added
        const textingDataPromise = Promise.resolve([
            {State: 'CA', County: 'Los Angeles'},
            {State: 'NY', County: 'New York'},
            {State: 'TX', County: 'Harris'},
            {State: 'TN', County: 'Davidson'}, // Nashville
            // Add more counties as needed
        ]);
        
        // Plus Code encoding
        function encodePlusCode(latitude, longitude) {
            latitude = Math.max(-90, Math.min(90, latitude));
            longitude = Math.max(-180, Math.min(180, longitude));
            latitude += 90;
            longitude += 180;
            let code = '';
            const gridSizes = [20, 1, 0.05, 0.0025, 0.000125];
            for (let i = 0; i < 5; i++) {
                const latIndex = Math.floor(latitude / gridSizes[i]) % 20;
                const lngIndex = Math.floor(longitude / gridSizes[i]) % 20;
                code += CODE_ALPHABET[latIndex] + CODE_ALPHABET[lngIndex];
            }
            return code.slice(0, 8) + '+' + code.slice(8);
        }
        
        // Toast notification
        function showToast(message, isError = false) {
            const toast = document.getElementById('toast');
            const toastMessage = document.getElementById('toastMessage');
            toastMessage.textContent = message;
            toast.classList.toggle('error', isError);
            toast.classList.add('show');
            setTimeout(() => toast.classList.remove('show'), 3000);
        }
        
        // Copy functions
        function copyToClipboard(text, message) {
            navigator.clipboard.writeText(text).then(() => {
                showToast(message);
            }).catch(() => {
                // Fallback for older browsers
                const textarea = document.createElement('textarea');
                textarea.value = text;
                document.body.appendChild(textarea);
                textarea.select();
                document.execCommand('copy');
                document.body.removeChild(textarea);
                showToast(message);
            });
        }
        
        function copyCoordinates() {
            if (currentLocation) {
                copyToClipboard(
                    `${currentLocation.latitude}, ${currentLocation.longitude}`,
                    'GPS coordinates copied!'
                );
            }
        }
        
        function copyAddress() {
            if (currentLocation) {
                copyToClipboard(currentLocation.address, 'Address copied!');
            }
        }
        
        function copyPlusCode() {
            if (currentLocation) {
                copyToClipboard(currentLocation.plusCode, 'Plus Code copied!');
            }
        }
        
        function copyAll() {
            if (currentLocation) {
                const allInfo = `🚨 EMERGENCY LOCATION INFO

GPS COORDINATES: ${currentLocation.latitude}, ${currentLocation.longitude}
ADDRESS: ${currentLocation.address}
INTERSECTION: ${currentLocation.crossStreets}
PLUS CODE: ${currentLocation.plusCode}
MAPS LINK: https://maps.google.com/?q=${currentLocation.latitude},${currentLocation.longitude}
ACCURACY: ${currentLocation.accuracyText}

Generated: ${new Date().toLocaleString()}`;
                
                copyToClipboard(allInfo, 'All location info copied!');
            }
        }
        
        // Share location
        async function shareLocation() {
            if (!currentLocation) return;
            
            const shareData = {
                title: 'Emergency Location',
                text: `Emergency Location: ${currentLocation.address}\nGPS: ${currentLocation.latitude}, ${currentLocation.longitude}`,
                url: `https://maps.google.com/?q=${currentLocation.latitude},${currentLocation.longitude}`
            };
            
            try {
                if (navigator.share) {
                    await navigator.share(shareData);
                } else {
                    copyAll();
                }
            } catch (err) {
                console.error('Share failed:', err);
                copyAll();
            }
        }
        
        // Open in maps
        function openInMaps() {
            if (currentLocation) {
                window.open(
                    `https://maps.google.com/?q=${currentLocation.latitude},${currentLocation.longitude}`,
                    '_blank'
                );
            }
        }
        
        // Text 911
        function text911() {
            if (currentLocation) {
                const message = `EMERGENCY LOCATION:
GPS: ${currentLocation.latitude}, ${currentLocation.longitude}
Address: ${currentLocation.address}
Intersection: ${currentLocation.crossStreets}
Plus Code: ${currentLocation.plusCode}
Maps: https://maps.google.com/?q=${currentLocation.latitude},${currentLocation.longitude}

[Describe your emergency here]`;
                
                const smsLink = `sms:911?body=${encodeURIComponent(message)}`;
                window.location.href = smsLink;
                
                setTimeout(() => {
                    showToast('Opening messaging app. Add emergency details and send.');
                }, 500);
            } else {
                showToast('Location still loading...', true);
            }
        }
        
        // Geocoding functions
        async function reverseGeocode(lat, lon) {
            try {
                const response = await fetch(
                    `https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lon}&zoom=18&addressdetails=1`
                );
                if (response.ok) {
                    return await response.json();
                }
            } catch (error) {
                console.error('Geocoding error:', error);
            }
            return null;
        }
        
        function formatAddress(data) {
            if (!data || !data.address) return 'Unable to determine';
            
            const addr = data.address;
            const parts = [];
            
            if (addr.house_number) parts.push(addr.house_number);
            if (addr.road || addr.street) parts.push(addr.road || addr.street);
            if (!parts.length && addr.building) parts.push(addr.building);
            
            const city = addr.city || addr.town || addr.village || addr.suburb;
            if (city) parts.push(city);
            if (addr.state) parts.push(addr.state);
            if (addr.postcode) parts.push(addr.postcode);
            
            return parts.join(', ') || data.display_name || 'Unable to determine';
        }
        
        async function findCrossStreets(lat, lon, data) {
            if (!data || !data.address) return 'Unable to determine';
            
            const currentRoad = data.address.road || data.address.street || '';
            if (currentRoad) {
                try {
                    const offset = 0.001;
                    const nearbyResponse = await fetch(
                        `https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat + offset}&lon=${lon + offset}&zoom=18&addressdetails=1`
                    );
                    if (nearbyResponse.ok) {
                        const nearbyData = await nearbyResponse.json();
                        const nearbyRoad = nearbyData.address?.road || nearbyData.address?.street || '';
                        if (nearbyRoad && nearbyRoad !== currentRoad) {
                            return `${currentRoad} & ${nearbyRoad}`;
                        }
                    }
                } catch (error) {
                    console.error('Cross streets error:', error);
                }
                return `Near ${currentRoad}`;
            }
            return 'Unable to determine';
        }
        
        // Update display with location data
        async function updateDisplay(position) {
            const lat = position.coords.latitude;
            const lon = position.coords.longitude;
            const accuracy = position.coords.accuracy;
            
            // Show emergency buttons
            document.getElementById('emergencyButtons').style.display = 'grid';
            
            // Update coordinates
            const coordsText = `${lat.toFixed(6)}, ${lon.toFixed(6)}`;
            document.getElementById('coordinates').textContent = coordsText;
            
            // Generate Plus Code
            const plusCode = encodePlusCode(lat, lon);
            document.getElementById('plusCode').textContent = plusCode;
            
            // Update accuracy
            let accuracyText = '';
            let accuracyPercent = 100;
            let accuracyClass = '';
            
            if (accuracy <= 10) {
                accuracyText = `Excellent (±${Math.round(accuracy)}m)`;
                accuracyPercent = 100;
            } else if (accuracy <= 30) {
                accuracyText = `Good (±${Math.round(accuracy)}m)`;
                accuracyPercent = 75;
            } else if (accuracy <= 50) {
                accuracyText = `Fair (±${Math.round(accuracy)}m)`;
                accuracyPercent = 50;
            } else {
                accuracyText = `Approximate (±${Math.round(accuracy)}m)`;
                accuracyPercent = 25;
                accuracyClass = 'accuracy-poor';
            }
            
            document.getElementById('accuracyText').textContent = accuracyText;
            document.getElementById('accuracyBar').style.width = `${accuracyPercent}%`;
            document.getElementById('accuracySection').className = `accuracy-section ${accuracyClass}`;
            
            // Get address information
            const geoData = await reverseGeocode(lat, lon);
            const address = formatAddress(geoData);
            const crossStreets = await findCrossStreets(lat, lon, geoData);
            
            document.getElementById('address').textContent = address;
            document.getElementById('crossStreets').textContent = crossStreets;
            
            // Check text 911 availability
            const textingData = await textingDataPromise;
            const stateFull = geoData?.address?.state || '';
            const countyFull = geoData?.address?.county || '';
            const stateCode = STATE_ABBREVIATIONS[stateFull] || '';
            const county = countyFull.replace(/ County| Parish| Census Area| Borough| Municipality/gi, '').trim();
            
            const textAvailable = textingData.some(e => e.State === stateCode && e.County === county);
            const textBtn = document.querySelector('.btn-text');
            const textStatus = document.getElementById('textStatus');
            
            if (textAvailable) {
                textBtn.style.display = 'flex';
                textStatus.textContent = 'Text 911 is available in your area';
            } else {
                textBtn.style.display = 'none';
                textStatus.textContent = 'Text 911 is not available in your area - please call 911';
            }
            
            // Store current location
            currentLocation = {
                latitude: lat.toFixed(6),
                longitude: lon.toFixed(6),
                plusCode: plusCode,
                address: address,
                crossStreets: crossStreets,
                accuracyText: accuracyText
            };
            
            // Show content, hide loading
            document.getElementById('loading').style.display = 'none';
            document.getElementById('content').style.display = 'block';
            document.getElementById('error').style.display = 'none';
        }
        
        // Error handling
        function showError(error) {
            let message = '';
            switch (error.code) {
                case error.PERMISSION_DENIED:
                    message = "Location access was denied. Please enable location permissions in your browser settings and try again.";
                    break;
                case error.POSITION_UNAVAILABLE:
                    message = "Location information is unavailable. Please check your device settings.";
                    break;
                case error.TIMEOUT:
                    message = "Location request timed out. Please try again.";
                    break;
                default:
                    message = "Unable to retrieve your location. Please check your settings and try again.";
            }
            
            document.getElementById('errorMessage').textContent = message;
            document.getElementById('loading').style.display = 'none';
            document.getElementById('content').style.display = 'none';
            document.getElementById('emergencyButtons').style.display = 'none';
            document.getElementById('error').style.display = 'block';
        }
        
        // Retry location
        function retryLocation() {
            document.getElementById('error').style.display = 'none';
            document.getElementById('loading').style.display = 'block';
            getLocation();
        }
        
        // Get location
        function getLocation() {
            if (navigator.geolocation) {
                // Get initial position
                navigator.geolocation.getCurrentPosition(
                    position => {
                        updateDisplay(position).catch(console.error);
                    },
                    showError,
                    {
                        enableHighAccuracy: true,
                        timeout: 30000,
                        maximumAge: 0
                    }
                );
                
                // Watch position for updates
                watchId = navigator.geolocation.watchPosition(
                    position => {
                        updateDisplay(position).catch(console.error);
                    },
                    error => {
                        console.error('Watch position error:', error);
                    },
                    {
                        enableHighAccuracy: true,
                        maximumAge: 10000
                    }
                );
            } else {
                showError({ code: 0, message: "Geolocation not supported" });
            }
        }
        
        // Initialize on page load
        window.addEventListener('load', () => {
            getLocation();
        });
        
        // Clean up on page unload
        window.addEventListener('unload', () => {
            if (watchId) {
                navigator.geolocation.clearWatch(watchId);
            }
        });
    </script>
</body>
</html>
